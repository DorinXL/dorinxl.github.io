<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>阅读笔记 on DorinXL-荡影</title>
        <link>https://dorinxl.github.io/categories/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link>
        <description>Recent content in 阅读笔记 on DorinXL-荡影</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>荡影-DorinXL</copyright>
        <lastBuildDate>Wed, 06 Nov 2019 03:04:00 +0000</lastBuildDate><atom:link href="https://dorinxl.github.io/categories/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>《C Prime Plus》第十一节笔记</title>
        <link>https://dorinxl.github.io/p/c-prime-plus%E7%AC%AC%E5%8D%81%E4%B8%80%E8%8A%82%E7%AC%94%E8%AE%B0/</link>
        <pubDate>Wed, 06 Nov 2019 03:04:00 +0000</pubDate>
        
        <guid>https://dorinxl.github.io/p/c-prime-plus%E7%AC%AC%E5%8D%81%E4%B8%80%E8%8A%82%E7%AC%94%E8%AE%B0/</guid>
        <description>&lt;h1 id=&#34;第十一章-字符串和字符串函数&#34;&gt;第十一章 字符串和字符串函数
&lt;/h1&gt;&lt;hr&gt;
&lt;h3 id=&#34;111-i表示字符串和字符串io&#34;&gt;11.1 i表示字符串和字符串I/O
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;puts()函数只显示字符串，而且自动在显示的字符串末尾加上换行符&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;1111-在程序中定义字符串&#34;&gt;11.1.1 在程序中定义字符串
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;字符串字面量(字符串常量)
&lt;ul&gt;
&lt;li&gt;用双引号括起来的内容称为字符串字面量(string literal),也叫字符串常量(string constant)&lt;/li&gt;
&lt;li&gt;字符串常量属于静态储存类别&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字符串数组和初始化
&lt;ul&gt;
&lt;li&gt;让编译器计算数组大小只能用在初始化数组时。如果创建一个稍后再填充的数组，就必须在声明时指定大小。&lt;/li&gt;
&lt;li&gt;两种初始化：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  1. 字符数组名初始化： char car[10] = &amp;#34;Tata&amp;#34;；
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  2. 指针数组初始化：   char * pt1 = &amp;#34;Something is pointing at me&amp;#34;;  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;数组和指针的区别
&lt;ul&gt;
&lt;li&gt;字符串储存在静态储存区中&lt;/li&gt;
&lt;li&gt;初始化数组把静态存储区的【字符串】拷贝到数组中，而初始化指针只把字符串的【地址】拷贝给指针&lt;/li&gt;
&lt;li&gt;数组的元素是变量（除非数组被声明成const），但数组名不是变量。&lt;/li&gt;
&lt;li&gt;如果不修改字符串，不要用指针指向字符串字面量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字符串数组
&lt;ul&gt;
&lt;li&gt;创建字符数组：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1. 指向字符串的字符数组
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2. char类型数组的数组
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;下标访问字符串&lt;/li&gt;
&lt;li&gt;字符串数组[字符串下标][字符串字符]&lt;/li&gt;
&lt;li&gt;字符数组和char数组的区别：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1. 大小不同，类型不同。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2. 储存方式不同，静态内存和副本的区别。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;3. 字符串数组分配内存的使用率较低。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;在选择上
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1.需求效率：使用指针数组，但是不可修改，会擦写程序内存。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2.需求更改或输入：使用字符数组，但是效率低。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;1112-指针和字符串&#34;&gt;11.1.2 指针和字符串
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;区分指针的值，指针指向的值：指针的值是指向的地址，指针指向的值是地址存储的内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;112-字符串输入&#34;&gt;11.2 字符串输入
&lt;/h3&gt;&lt;hr&gt;
&lt;h5 id=&#34;1121-分配空间&#34;&gt;11.2.1 分配空间
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;在创建字符串数组时有必要分配空间，以防止擦写其他程序或内存
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1.在声明时显式指明数组大小
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2.使用C库函数来分配内存
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h5 id=&#34;1122-不幸的gets函数&#34;&gt;11.2.2 不幸的gets()函数
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;本是用于处理整行输入。&lt;/li&gt;
&lt;li&gt;gets()函数只知道数组的开始处，并不知道其中有多少个元素。如果输入的字符串过长，可能会导致缓冲区溢出。&lt;/li&gt;
&lt;li&gt;gets()函数会读取输入至换行符，并丢弃换行符，在末尾添加\0，进行存储。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h5 id=&#34;1123-gets函数的代替品&#34;&gt;11.2.3 gets()函数的代替品
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;fgets()函数（ 和fputs()函数 ）
&lt;ul&gt;
&lt;li&gt;三大特点：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1. 限制： fgets()函数指明了读入字符的最大数量，保存在第二个参数中，如果参数是n，那么将读取n-1个字符。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2. 保留： 如果fget()函数读取到一个换行符，那么会将其储存而不是删除。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;3. 来源： fgets()第三个参数指明要读取的文件。如果来源于键盘，则以stdin为参数。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;puts()函数会在输入的字符串末尾添加一个换行符，而fgets()不会。&lt;/li&gt;
&lt;li&gt;fgets()处理多行输入：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    while(fgets(words,lens,stdin)!=NULL &amp;amp;&amp;amp; word[0]!=&amp;#39;\n&amp;#39;){
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        fputs(words,stdout);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;get_s()函数
&lt;ul&gt;
&lt;li&gt;基本形式：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    get_s(字符串地址，大小)；
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;get_s()与fgets()的区别：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    1. get_s()没有第三个参数，只从标准输入中读取数据。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    2. get_s()如果读到换行符，会舍弃它。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    3. 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;关于选择：
&lt;ol&gt;
&lt;li&gt;存储区装得下输入，三者无差，但fgets()会保留\n&lt;/li&gt;
&lt;li&gt;存储区装不下输入，fgets()可以灵活处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h5 id=&#34;1124-scanf函数&#34;&gt;11.2.4 scanf()函数
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;scanf(),fgets()和gets()函数的区别在于如何确定字符串的末尾。&lt;/li&gt;
&lt;li&gt;scanf()函数会返回一个整数值，该值等于scanf()成功读取的项数或者EOF（读到文件末尾）&lt;/li&gt;
&lt;li&gt;%s可防止输入溢出。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;113-字符串输入&#34;&gt;11.3 字符串输入
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;打印字符串的三个标准库函数：puts(),fputs()和printf();&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;puts()函数
&lt;ul&gt;
&lt;li&gt;传入地址。&lt;/li&gt;
&lt;li&gt;puts()函数会在字符串末尾自动添加一个\n；&lt;/li&gt;
&lt;li&gt;该函数遇到空字符就会停止输出，所以必须保证又空字符存在。&lt;/li&gt;
&lt;li&gt;gets()丢弃换行符，但puts()添加换行符&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;fputs()函数
&lt;ul&gt;
&lt;li&gt;第二个参数指明来源&lt;/li&gt;
&lt;li&gt;不会在输出的末尾添加\n&lt;/li&gt;
&lt;li&gt;fgets()保留换行符，且fputs()不会添加换行符。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;printf()函数
&lt;ul&gt;
&lt;li&gt;打印多个字符串比较简单。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;114-自定义输入输出函数&#34;&gt;11.4 自定义输入/输出函数
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;自己写函数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;put1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;            &lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;与&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;！&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\0&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;相同&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;当&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string指向空字符时&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string的值时0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;putchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;优先级高于&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;ne&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;put2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;ne&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;putchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;putchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;115-字符串函数&#34;&gt;11.5 字符串函数
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;strlen()函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表示长度，存在于string.h&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;strcat()函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作用：拼接两个字符串&lt;/li&gt;
&lt;li&gt;示例&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    strcat(str1,str2);   // 将str2拼接到str1后面，改变str1而不改变str2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;缺点：strcat无法检测第一个数组能否容纳第二个数组，可能会造成字符溢出。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;strncat()函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;改进strcat()函数，第三个参数指定最大添加字符数，末尾自动添加空字符。&lt;/li&gt;
&lt;li&gt;示例&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    strnact(str1,str2,size);  //将str2的前size个字符拼接到str1后面。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;strcmp()函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作用：比较字符串，如果相同则返回0，否则返回非零值。&lt;/li&gt;
&lt;li&gt;示例&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    strcmp(str1,str2);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;本机操作 返回的值：从不相同的字符开始，前一个字符排在ascii前则返回-1，否则返回1，相同0；&lt;/li&gt;
&lt;li&gt;书本 返回的值是前一个字符串的acsii码减后一个的，按照机器排序顺序进行比较。&lt;/li&gt;
&lt;li&gt;strncmp第三个参数指定查找前几个字符。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;strcpy和strncpy函数&#34;&gt;strcpy()和strncpy()函数
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sprintf()函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他字符函数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>《C Prime Plus》第十节笔记</title>
        <link>https://dorinxl.github.io/p/c-prime-plus%E7%AC%AC%E5%8D%81%E8%8A%82%E7%AC%94%E8%AE%B0/</link>
        <pubDate>Wed, 06 Nov 2019 02:56:00 +0000</pubDate>
        
        <guid>https://dorinxl.github.io/p/c-prime-plus%E7%AC%AC%E5%8D%81%E8%8A%82%E7%AC%94%E8%AE%B0/</guid>
        <description>&lt;h1 id=&#34;数组和指针&#34;&gt;数组和指针
&lt;/h1&gt;&lt;hr&gt;
&lt;h3 id=&#34;101-数组&#34;&gt;10.1 数组
&lt;/h3&gt;&lt;hr&gt;
&lt;h5 id=&#34;1011-初始化数组&#34;&gt;10.1.1 初始化数组
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;标量变量：只储存单个值的变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建只读数组，应该用const声明和初始化数组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;days&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;省略方括号中的数字，编译器会自动匹配数组大小和初始化列表中的项数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h5 id=&#34;1012-指定初始化容器-c99&#34;&gt;10.1.2 指定初始化容器 c99
&lt;/h5&gt;&lt;p&gt;例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; int arr[6] = {[5]=212};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;重要特性一：如果指定初始化容器后面又更多的值，如[5]=4,22,566；那么后面这些值将被用于初始化指定元素的后面的元素&lt;/li&gt;
&lt;li&gt;重要特性二：初始化可以覆盖之前的初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h5 id=&#34;1013-给数组元素赋值&#34;&gt;10.1.3 给数组元素赋值
&lt;/h5&gt;&lt;hr&gt;
&lt;h5 id=&#34;1014-数组边界&#34;&gt;10.1.4 数组边界
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;使用越界的数组会造成意外错误，例如改变其他数组元素的值，或是导致程序异常终止&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h5 id=&#34;1015-指定数组的大小&#34;&gt;10.1.5 指定数组的大小
&lt;/h5&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; int n=5;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; int arr[n];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;以上的初始化方式在c99之前不允许，而c99允许这样做。这创建了一种新的数组：VLA&lt;/li&gt;
&lt;li&gt;VLA成为变长数组(variable-length array)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;102-多维数组&#34;&gt;10.2 多维数组
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;103-指针和数组&#34;&gt;10.3 指针和数组
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数组名是数组首元素的地址&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;arr == &amp;amp;arr[0];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指针的加减是它所指向类型的大小加减&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;104-函数数组和指针&#34;&gt;10.4 函数、数组和指针
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;int ar[]和int  *ar形式都表示ar是一个指向int的指针，但是，int ar[]只能用于声明形式参数，第二种可以改变数组内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;1041-使用指针形参&#34;&gt;10.4.1 使用指针形参
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;用函数处理数组
&lt;ol&gt;
&lt;li&gt;一个指针形参标识数组开始，另一个整数形参表示待处理数组元素个数。&lt;/li&gt;
&lt;li&gt;一个指针指向数组的开始处，另一个指向数组的结束处。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;C 保证在给数组分配空间时，指向数组后面第一个位置的指针仍是有效的指针。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;1042-指针表示法和数组表示法&#34;&gt;10.4.2 指针表示法和数组表示法
&lt;/h5&gt;&lt;hr&gt;
&lt;h3 id=&#34;105-指针基本操作&#34;&gt;10.5 指针基本操作
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;分别是：
&lt;ol&gt;
&lt;li&gt;赋值&lt;/li&gt;
&lt;li&gt;解引用&lt;/li&gt;
&lt;li&gt;取址&lt;/li&gt;
&lt;li&gt;指针和整数相加&lt;/li&gt;
&lt;li&gt;递增指针&lt;/li&gt;
&lt;li&gt;指针减去一个整数&lt;/li&gt;
&lt;li&gt;递减指针&lt;/li&gt;
&lt;li&gt;指针求差&lt;/li&gt;
&lt;li&gt;比较&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;C 只能保证指向数组任意元素的指针和指向数组后面第1个位置的指针有效。&lt;/li&gt;
&lt;li&gt;千万不要解引用未初始化的指针，否则可能会擦写数据或代码。&lt;/li&gt;
&lt;li&gt;指针的第一个基本用法是在函数间传递信息，第二个基本用法是用在处理数组的函数中。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;106-保护数组中的数据&#34;&gt;10.6 保护数组中的数据
&lt;/h3&gt;&lt;h5 id=&#34;1061-对形式参数使用const&#34;&gt;10.6.1 对形式参数使用const
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;不能修改数组中的数据内容，保护原始数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;1062-const的其他内容&#34;&gt;10.6.2 const的其他内容
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;const指针虽然不能修改其所指向的数据，但可以使其指向其他地址。&lt;/li&gt;
&lt;li&gt;把const数据或非const数据的地址初始化为指向const的指针或为其赋值时合法的。&lt;/li&gt;
&lt;li&gt;而普通指针只能被赋予非const数据的指针&lt;/li&gt;
&lt;li&gt;const 类型 * -&amp;gt; 定值，不可被修改&lt;/li&gt;
&lt;li&gt;类型 const * -&amp;gt; 定地址，不可被修改&lt;/li&gt;
&lt;li&gt;const 类型 *const -&amp;gt; 值与地址都不可被修改&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;107-指针和多维数组&#34;&gt;10.7 指针和多维数组
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;地址的地址或指针的指针就是双重间接的例子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int arr[4][2];
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;arr==&amp;amp;arr[0];
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;arr[0]==&amp;amp;arr[0][0];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最好用简单的数组表示法，而不是指针表示法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;1071-指向多维数组的指针&#34;&gt;10.7.1 指向多维数组的指针
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;声明：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int (* p)[2];   //p是指向一个内含两个int类型的数组的指针
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//而[]的优先级高于*，我们可以省去括号：
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//[]先和p结合成数组，然后*表示p内含指针
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int * p[2];  //p是一个内含两个指针元素的数组，每个元素都指向int的指针
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;1072-指针的兼容性&#34;&gt;10.7.2 指针的兼容性
&lt;/h5&gt;&lt;h5 id=&#34;1073-函数和多维数组&#34;&gt;10.7.3 函数和多维数组
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果arr是二维数组，arr[]就是一维数组，可将其视为二维数组的一行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一般而言，声明一个指向N维数组的指针时，只能省略最左边方括号中的值：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int sum4d(int arr[][20][30][15] , int rows );
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;108-变长数组vla&#34;&gt;10.8 变长数组（VLA）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;C99新增了变长数组(variable-length array，VLA),允许使用变量表示数组的维度，如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int quarter = 4;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int regions = 5;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;double VLA[quarter][regions]；  //一个变长数组VLA
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;变长数组不能改变大小，这里的“变”的意思是：在创建数组时，可以使用变量指定数组的维度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;声明一个带二维变长数组参数的函数，要注意顺序：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int sun2d(int rows, int cols,int ar[rows][cols] );
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;变长数组还允许动态内存分配，可在程序运行时指定数组大小。普通的C数组都是静态内存分配，即在编译时确定数组大小。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;109-复合字面量&#34;&gt;10.9 复合字面量
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;C99新增了复合字面量(compound literal),字面量是除符号常量外的常量。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int diva[2] = {10,20};  //一个普通的数组声明
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(int [2]) {10,20}   //复合字面量
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(int []) {10,20} //复合字面量也可以省略大小，编译器自动计算
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因为复合字面量是匿名的，所以不呢个先创建后使用它，必须在创建的同时使用它。使用指针记录就是一种用法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int *pl;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pl = (int []) {10,20}; //这个与diva数组完全相同
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;1010-关键概念&#34;&gt;10.10 关键概念
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;数组用于储存相同类型的数据，C把数组看作是派生类型&lt;/li&gt;
&lt;li&gt;在把数组名作为实际参数时，传递给函数的不是整个数组，而是数组的地址。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>《C Prime Plus》第九节笔记</title>
        <link>https://dorinxl.github.io/p/c-prime-plus%E7%AC%AC%E4%B9%9D%E8%8A%82%E7%AC%94%E8%AE%B0/</link>
        <pubDate>Wed, 06 Nov 2019 02:39:00 +0000</pubDate>
        
        <guid>https://dorinxl.github.io/p/c-prime-plus%E7%AC%AC%E4%B9%9D%E8%8A%82%E7%AC%94%E8%AE%B0/</guid>
        <description>&lt;h1 id=&#34;第九节-函数&#34;&gt;第九节 函数
&lt;/h1&gt;&lt;hr&gt;
&lt;h3 id=&#34;91-复习函数&#34;&gt;9.1 复习函数
&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;函数原型 &lt;em&gt;function prototype&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;函数调用 &lt;em&gt;function call&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;函数定义 &lt;em&gt;function definition&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;形参 实参&lt;/li&gt;
&lt;li&gt;典型的ANSI C函数的定义：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    返回类型 名称（形参声明列表）
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;92-ansi-c函数原型&#34;&gt;9.2 ANSI C函数原型
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;主调函数把它的参数储存在被称为栈(stack)的临时储存区&lt;/li&gt;
&lt;li&gt;错误导致无法编译，而警告仍然允许编译&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;93-递归&#34;&gt;9.3 递归
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;printf使用%p打印地址&lt;/li&gt;
&lt;li&gt;递归的优缺点&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   1.优点是递归为某些编程问题提供了最简单的解决方案
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   2.缺点是递归算法会快速消耗计算机的内存资源
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;94-编译多源代码文件的程序&#34;&gt;9.4 编译多源代码文件的程序
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;scanf(&amp;quot;%*s&amp;quot;)跳至下一个空白字符&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;95-查找地址运算符&#34;&gt;9.5 查找地址：&amp;amp;运算符
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一元运算符&amp;amp;给出变量的存储地址&lt;/li&gt;
&lt;li&gt;PC地址通常用十六进制形式表示，每个十六进制对应四位&lt;/li&gt;
&lt;li&gt;%p是输出地址的转换说明&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;96-更改主调函数中的变量&#34;&gt;9.6 更改主调函数中的变量
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;典型例子：用函数交换两个值&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;97-指针简介&#34;&gt;9.7 指针简介
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;指针(pointer)是一个值为内存地址的变量(或数据对象)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;971-简介运算符-&#34;&gt;9.7.1 简介运算符 *
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;使用间接运算符(indirection operator)找出内存地址所对应的值，又是也称为解引用运算符(dereferencing operator)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;972-声明指针&#34;&gt;9.7.2 声明指针
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;指针是一个新类型，需要声明指针所指变量的类型&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    int * pi;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    char * pc;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    float * pf,* pg;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h5 id=&#34;973-使用指针在函数间通信&#34;&gt;9.7.3 使用指针在函数间通信
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;函数无法直接访问其他函数中的变量，这种限制访问保护了数据的完整性。但是，当确实需要在函数中访问另一个函数的数据时，可以把指针作为函数的参数。&lt;/li&gt;
&lt;li&gt;如果需要在被调函数中修改主调函数的变量，使用地址或指针作为参数。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>《C Prime Plus》第八节笔记</title>
        <link>https://dorinxl.github.io/p/c-prime-plus%E7%AC%AC%E5%85%AB%E8%8A%82%E7%AC%94%E8%AE%B0/</link>
        <pubDate>Wed, 06 Nov 2019 02:36:00 +0000</pubDate>
        
        <guid>https://dorinxl.github.io/p/c-prime-plus%E7%AC%AC%E5%85%AB%E8%8A%82%E7%AC%94%E8%AE%B0/</guid>
        <description>&lt;h1 id=&#34;第八节-字符输入输出和输入验证&#34;&gt;第八节 字符输入/输出和输入验证
&lt;/h1&gt;&lt;h3 id=&#34;81-单字符iogetchar和putchar&#34;&gt;8.1 单字符I/O：getchar()和putchar()
&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;getchar()和putchar()包含在stdio.h头文件中&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;82-缓冲区&#34;&gt;8.2 缓冲区
&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;无缓冲输入： 直接回复用户&lt;/li&gt;
&lt;li&gt;缓冲输入： 暂缓回复&lt;/li&gt;
&lt;li&gt;缓冲区：收集用户输入字符的临时存储区
&lt;ul&gt;
&lt;li&gt;节省时间&lt;/li&gt;
&lt;li&gt;可以修正输入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;完全缓冲I/o：当缓冲区被填满时才刷新缓冲区&lt;/li&gt;
&lt;li&gt;行缓冲I/O：出现换行符时刷新缓冲区&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;83-结束键盘输入&#34;&gt;8.3 结束键盘输入
&lt;/h3&gt;&lt;hr&gt;
&lt;h5 id=&#34;831-文件流和键盘输入&#34;&gt;8.3.1 文件、流和键盘输入
&lt;/h5&gt;&lt;h5 id=&#34;832-文件结尾&#34;&gt;8.3.2 文件结尾
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;文件结尾的一种方法：在文件的末尾放置一个特殊的字符文件标记（ctrl+z)&lt;/li&gt;
&lt;li&gt;另一种方法：储存文件大小的信息&lt;/li&gt;
&lt;li&gt;getchar()和scanf()读取到文件末尾返回EOF
&lt;ul&gt;
&lt;li&gt;EOF在stdio.h中被预处理定义&lt;/li&gt;
&lt;li&gt;UNIX中Ctrl+D  PC中Ctrl+Z&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;84-重定向和文件&#34;&gt;8.4 重定向和文件
&lt;/h3&gt;&lt;hr&gt;
&lt;h5 id=&#34;841-unixlinux和dos的重定向&#34;&gt;8.4.1 UNIX、Linux和DOS的重定向
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;重定向输入让程序使用文件而不是程序输入&lt;/li&gt;
&lt;li&gt;重定向输出让程序输出到文件而不是屏幕
&lt;ul&gt;
&lt;li&gt;重定向输入 &amp;gt;&lt;/li&gt;
&lt;li&gt;重定向输出 &amp;lt;&lt;/li&gt;
&lt;li&gt;组合重定向 &amp;gt;输出文件 &amp;lt;输入文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关于重定向的要求：
&lt;ul&gt;
&lt;li&gt;程序与文件放在同同一路径下&lt;/li&gt;
&lt;li&gt;cmd窗口使用时用cd指令来改变路径&lt;/li&gt;
&lt;li&gt;一对一原则&lt;/li&gt;
&lt;li&gt;&amp;laquo; 可以将字符加在文件之后而不覆盖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;85-创建更友好的用户界面&#34;&gt;8.5 创建更友好的用户界面
&lt;/h3&gt;&lt;hr&gt;
&lt;h5 id=&#34;851-使用缓冲输入&#34;&gt;8.5.1 使用缓冲输入
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;考虑用户各种输入情况&lt;/li&gt;
&lt;li&gt;处理好输入结尾\n&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;852-混合数值和字符输入&#34;&gt;8.5.2 混合数值和字符输入
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;getchar()读取每个字符，包括空格、制表符和换行符，而scanf()则会跳过这些&lt;/li&gt;
&lt;li&gt;scanf()输入会返回数值，数值代表成功读取个数&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;86-输入验证&#34;&gt;8.6 输入验证
&lt;/h3&gt;&lt;hr&gt;
&lt;h5 id=&#34;861-分析程序&#34;&gt;8.6.1 分析程序
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;程序遵循模块化的编程思想，使用独立函数（模块）来验证输入和管理显示。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;862-输入流和数字&#34;&gt;8.6.2 输入流和数字
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;gatchar()和%c的scanf()可以接受所有的字符&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;87-菜单浏览&#34;&gt;8.7 菜单浏览
&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;switch语句&lt;/li&gt;
&lt;li&gt;解决缓冲输入带来的麻烦，跳过多余输入和换行符&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    while(getchar()!=&amp;#39;\n&amp;#39;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        continue;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        
    </channel>
</rss>
